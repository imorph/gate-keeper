// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gatekeeper.proto

package gatekeeper

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The CHECK request message containing login details: login, password (hopefully hashed), IP
type CheckRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckRequest) Reset()         { *m = CheckRequest{} }
func (m *CheckRequest) String() string { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()    {}
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eaae806628caa53, []int{0}
}

func (m *CheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckRequest.Unmarshal(m, b)
}
func (m *CheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckRequest.Marshal(b, m, deterministic)
}
func (m *CheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckRequest.Merge(m, src)
}
func (m *CheckRequest) XXX_Size() int {
	return xxx_messageInfo_CheckRequest.Size(m)
}
func (m *CheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckRequest proto.InternalMessageInfo

func (m *CheckRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *CheckRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CheckRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// The CHECK response message containing true or false
type CheckReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckReply) Reset()         { *m = CheckReply{} }
func (m *CheckReply) String() string { return proto.CompactTextString(m) }
func (*CheckReply) ProtoMessage()    {}
func (*CheckReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eaae806628caa53, []int{1}
}

func (m *CheckReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckReply.Unmarshal(m, b)
}
func (m *CheckReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckReply.Marshal(b, m, deterministic)
}
func (m *CheckReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckReply.Merge(m, src)
}
func (m *CheckReply) XXX_Size() int {
	return xxx_messageInfo_CheckReply.Size(m)
}
func (m *CheckReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckReply proto.InternalMessageInfo

func (m *CheckReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// The request RESET message containing: login, IP for wich we will reset counters
type ResetRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetRequest) Reset()         { *m = ResetRequest{} }
func (m *ResetRequest) String() string { return proto.CompactTextString(m) }
func (*ResetRequest) ProtoMessage()    {}
func (*ResetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eaae806628caa53, []int{2}
}

func (m *ResetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetRequest.Unmarshal(m, b)
}
func (m *ResetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetRequest.Marshal(b, m, deterministic)
}
func (m *ResetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetRequest.Merge(m, src)
}
func (m *ResetRequest) XXX_Size() int {
	return xxx_messageInfo_ResetRequest.Size(m)
}
func (m *ResetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetRequest proto.InternalMessageInfo

func (m *ResetRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *ResetRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// The RESET response message containing true or false and possible error
type ResetReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetReply) Reset()         { *m = ResetReply{} }
func (m *ResetReply) String() string { return proto.CompactTextString(m) }
func (*ResetReply) ProtoMessage()    {}
func (*ResetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eaae806628caa53, []int{3}
}

func (m *ResetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetReply.Unmarshal(m, b)
}
func (m *ResetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetReply.Marshal(b, m, deterministic)
}
func (m *ResetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetReply.Merge(m, src)
}
func (m *ResetReply) XXX_Size() int {
	return xxx_messageInfo_ResetReply.Size(m)
}
func (m *ResetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResetReply proto.InternalMessageInfo

func (m *ResetReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ResetReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

// The WITELIST request message containing subnet in CIDR notation (RFC 4632 and RFC 4291): "IP/MASK" eg "192.0.2.0/24"
type WhiteListRequest struct {
	Subnet               string   `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Isadd                bool     `protobuf:"varint,2,opt,name=isadd,proto3" json:"isadd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteListRequest) Reset()         { *m = WhiteListRequest{} }
func (m *WhiteListRequest) String() string { return proto.CompactTextString(m) }
func (*WhiteListRequest) ProtoMessage()    {}
func (*WhiteListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eaae806628caa53, []int{4}
}

func (m *WhiteListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhiteListRequest.Unmarshal(m, b)
}
func (m *WhiteListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhiteListRequest.Marshal(b, m, deterministic)
}
func (m *WhiteListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteListRequest.Merge(m, src)
}
func (m *WhiteListRequest) XXX_Size() int {
	return xxx_messageInfo_WhiteListRequest.Size(m)
}
func (m *WhiteListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteListRequest proto.InternalMessageInfo

func (m *WhiteListRequest) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *WhiteListRequest) GetIsadd() bool {
	if m != nil {
		return m.Isadd
	}
	return false
}

// The WITELIST response message containing true or false and possible error
type WhiteListReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteListReply) Reset()         { *m = WhiteListReply{} }
func (m *WhiteListReply) String() string { return proto.CompactTextString(m) }
func (*WhiteListReply) ProtoMessage()    {}
func (*WhiteListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eaae806628caa53, []int{5}
}

func (m *WhiteListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhiteListReply.Unmarshal(m, b)
}
func (m *WhiteListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhiteListReply.Marshal(b, m, deterministic)
}
func (m *WhiteListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteListReply.Merge(m, src)
}
func (m *WhiteListReply) XXX_Size() int {
	return xxx_messageInfo_WhiteListReply.Size(m)
}
func (m *WhiteListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteListReply.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteListReply proto.InternalMessageInfo

func (m *WhiteListReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *WhiteListReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

// The BLACKLIST request message containing subnet in CIDR notation (RFC 4632 and RFC 4291): "IP/MASK" eg "192.0.2.0/24"
type BlackListRequest struct {
	Subnet               string   `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Isadd                bool     `protobuf:"varint,2,opt,name=isadd,proto3" json:"isadd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlackListRequest) Reset()         { *m = BlackListRequest{} }
func (m *BlackListRequest) String() string { return proto.CompactTextString(m) }
func (*BlackListRequest) ProtoMessage()    {}
func (*BlackListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eaae806628caa53, []int{6}
}

func (m *BlackListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlackListRequest.Unmarshal(m, b)
}
func (m *BlackListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlackListRequest.Marshal(b, m, deterministic)
}
func (m *BlackListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlackListRequest.Merge(m, src)
}
func (m *BlackListRequest) XXX_Size() int {
	return xxx_messageInfo_BlackListRequest.Size(m)
}
func (m *BlackListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlackListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlackListRequest proto.InternalMessageInfo

func (m *BlackListRequest) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *BlackListRequest) GetIsadd() bool {
	if m != nil {
		return m.Isadd
	}
	return false
}

// The WITELIST response message containing true or false and possible error
type BlackListReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlackListReply) Reset()         { *m = BlackListReply{} }
func (m *BlackListReply) String() string { return proto.CompactTextString(m) }
func (*BlackListReply) ProtoMessage()    {}
func (*BlackListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eaae806628caa53, []int{7}
}

func (m *BlackListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlackListReply.Unmarshal(m, b)
}
func (m *BlackListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlackListReply.Marshal(b, m, deterministic)
}
func (m *BlackListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlackListReply.Merge(m, src)
}
func (m *BlackListReply) XXX_Size() int {
	return xxx_messageInfo_BlackListReply.Size(m)
}
func (m *BlackListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlackListReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlackListReply proto.InternalMessageInfo

func (m *BlackListReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *BlackListReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckRequest)(nil), "gatekeeper.CheckRequest")
	proto.RegisterType((*CheckReply)(nil), "gatekeeper.CheckReply")
	proto.RegisterType((*ResetRequest)(nil), "gatekeeper.ResetRequest")
	proto.RegisterType((*ResetReply)(nil), "gatekeeper.ResetReply")
	proto.RegisterType((*WhiteListRequest)(nil), "gatekeeper.WhiteListRequest")
	proto.RegisterType((*WhiteListReply)(nil), "gatekeeper.WhiteListReply")
	proto.RegisterType((*BlackListRequest)(nil), "gatekeeper.BlackListRequest")
	proto.RegisterType((*BlackListReply)(nil), "gatekeeper.BlackListReply")
}

func init() { proto.RegisterFile("gatekeeper.proto", fileDescriptor_7eaae806628caa53) }

var fileDescriptor_7eaae806628caa53 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0x6b, 0xc2, 0x30,
	0x14, 0xc6, 0x35, 0xa2, 0xd4, 0x87, 0x48, 0x09, 0x43, 0x4a, 0xf1, 0x30, 0x72, 0xda, 0xa9, 0x07,
	0xb7, 0xdb, 0x2e, 0x63, 0x3b, 0x78, 0xd8, 0x0e, 0xa3, 0x97, 0x9d, 0xab, 0x3e, 0x34, 0xb4, 0x98,
	0x2c, 0x89, 0x0c, 0xff, 0x93, 0xfd, 0xb9, 0xa3, 0x69, 0x88, 0x89, 0xb8, 0x21, 0xec, 0xd6, 0x97,
	0x97, 0xef, 0xf7, 0xb5, 0xdf, 0x57, 0x48, 0xb7, 0x95, 0xc1, 0x1a, 0x51, 0xa2, 0x2a, 0xa4, 0x12,
	0x46, 0x50, 0x38, 0x9d, 0xb0, 0x77, 0x98, 0xbc, 0xec, 0x70, 0x5d, 0x97, 0xf8, 0x79, 0x40, 0x6d,
	0xe8, 0x0d, 0x0c, 0x1b, 0xb1, 0xe5, 0xfb, 0xac, 0x7f, 0xdb, 0xbf, 0x1b, 0x97, 0xdd, 0x40, 0x73,
	0x48, 0x64, 0xa5, 0xf5, 0x97, 0x50, 0x9b, 0x8c, 0xd8, 0x85, 0x9f, 0xe9, 0x14, 0x08, 0x97, 0xd9,
	0xc0, 0x9e, 0x12, 0x2e, 0xd9, 0x1c, 0xc0, 0x11, 0x65, 0x73, 0x6c, 0xb7, 0xa2, 0xb6, 0xb0, 0xa4,
	0x24, 0xa2, 0x66, 0x0f, 0x30, 0x29, 0x51, 0xa3, 0xf9, 0xdb, 0xaf, 0x63, 0x12, 0xcf, 0x2c, 0x00,
	0x9c, 0xea, 0x02, 0x93, 0xa6, 0x30, 0x40, 0xa5, 0xdc, 0xf5, 0xf6, 0x91, 0x3d, 0x41, 0xfa, 0xb1,
	0xe3, 0x06, 0xdf, 0xb8, 0xf6, 0x4e, 0x33, 0x18, 0xe9, 0xc3, 0x6a, 0x8f, 0xc6, 0x59, 0xb9, 0xa9,
	0x7d, 0x03, 0xae, 0xab, 0x4d, 0xf7, 0x61, 0x49, 0xd9, 0x0d, 0x6c, 0x01, 0xd3, 0x80, 0x70, 0xb5,
	0xeb, 0x73, 0x53, 0xad, 0xeb, 0x7f, 0xb9, 0x06, 0x84, 0xab, 0x5c, 0x17, 0xdf, 0x04, 0x60, 0x59,
	0x19, 0x7c, 0xb5, 0x85, 0xd2, 0x47, 0x18, 0xda, 0xf8, 0x69, 0x56, 0x04, 0xc5, 0x87, 0x1d, 0xe7,
	0xb3, 0x0b, 0x1b, 0xd9, 0x1c, 0x59, 0xaf, 0x15, 0xdb, 0x9c, 0x63, 0x71, 0x58, 0x58, 0x2c, 0x3e,
	0x95, 0xc2, 0x7a, 0x74, 0x09, 0x63, 0x1f, 0x19, 0x9d, 0x87, 0xd7, 0xce, 0xbb, 0xc8, 0xf3, 0x5f,
	0xb6, 0x1e, 0xe4, 0x53, 0x88, 0x41, 0xe7, 0xf1, 0xc6, 0xa0, 0x38, 0x3a, 0xd6, 0x5b, 0x8d, 0xec,
	0xff, 0x7e, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x11, 0xb2, 0xee, 0x9f, 0x03, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GateKeeperClient is the client API for GateKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GateKeeperClient interface {
	// this will check login details and update associated counters
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// this will reset counters associated with derds from request
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetReply, error)
	// add/delete network/ip in white-list, all requests from whitelisted networks are OK by default
	// IMPORTANT: black-list have precedence over white-list, if network in both sets, requests will be banned
	WhiteList(ctx context.Context, in *WhiteListRequest, opts ...grpc.CallOption) (*WhiteListReply, error)
	// add/delete network/ip in black-list, all requests from blacklisted networks are NOT OK
	// IMPORTANT: black-list have precedence over white-list, if network in both sets, requests will be banned
	BlackList(ctx context.Context, in *BlackListRequest, opts ...grpc.CallOption) (*BlackListReply, error)
}

type gateKeeperClient struct {
	cc *grpc.ClientConn
}

func NewGateKeeperClient(cc *grpc.ClientConn) GateKeeperClient {
	return &gateKeeperClient{cc}
}

func (c *gateKeeperClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/gatekeeper.GateKeeper/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateKeeperClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetReply, error) {
	out := new(ResetReply)
	err := c.cc.Invoke(ctx, "/gatekeeper.GateKeeper/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateKeeperClient) WhiteList(ctx context.Context, in *WhiteListRequest, opts ...grpc.CallOption) (*WhiteListReply, error) {
	out := new(WhiteListReply)
	err := c.cc.Invoke(ctx, "/gatekeeper.GateKeeper/WhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateKeeperClient) BlackList(ctx context.Context, in *BlackListRequest, opts ...grpc.CallOption) (*BlackListReply, error) {
	out := new(BlackListReply)
	err := c.cc.Invoke(ctx, "/gatekeeper.GateKeeper/BlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateKeeperServer is the server API for GateKeeper service.
type GateKeeperServer interface {
	// this will check login details and update associated counters
	Check(context.Context, *CheckRequest) (*CheckReply, error)
	// this will reset counters associated with derds from request
	Reset(context.Context, *ResetRequest) (*ResetReply, error)
	// add/delete network/ip in white-list, all requests from whitelisted networks are OK by default
	// IMPORTANT: black-list have precedence over white-list, if network in both sets, requests will be banned
	WhiteList(context.Context, *WhiteListRequest) (*WhiteListReply, error)
	// add/delete network/ip in black-list, all requests from blacklisted networks are NOT OK
	// IMPORTANT: black-list have precedence over white-list, if network in both sets, requests will be banned
	BlackList(context.Context, *BlackListRequest) (*BlackListReply, error)
}

// UnimplementedGateKeeperServer can be embedded to have forward compatible implementations.
type UnimplementedGateKeeperServer struct {
}

func (*UnimplementedGateKeeperServer) Check(ctx context.Context, req *CheckRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedGateKeeperServer) Reset(ctx context.Context, req *ResetRequest) (*ResetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (*UnimplementedGateKeeperServer) WhiteList(ctx context.Context, req *WhiteListRequest) (*WhiteListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteList not implemented")
}
func (*UnimplementedGateKeeperServer) BlackList(ctx context.Context, req *BlackListRequest) (*BlackListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlackList not implemented")
}

func RegisterGateKeeperServer(s *grpc.Server, srv GateKeeperServer) {
	s.RegisterService(&_GateKeeper_serviceDesc, srv)
}

func _GateKeeper_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateKeeperServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatekeeper.GateKeeper/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateKeeperServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateKeeper_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateKeeperServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatekeeper.GateKeeper/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateKeeperServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateKeeper_WhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateKeeperServer).WhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatekeeper.GateKeeper/WhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateKeeperServer).WhiteList(ctx, req.(*WhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateKeeper_BlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateKeeperServer).BlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatekeeper.GateKeeper/BlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateKeeperServer).BlackList(ctx, req.(*BlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GateKeeper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gatekeeper.GateKeeper",
	HandlerType: (*GateKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _GateKeeper_Check_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _GateKeeper_Reset_Handler,
		},
		{
			MethodName: "WhiteList",
			Handler:    _GateKeeper_WhiteList_Handler,
		},
		{
			MethodName: "BlackList",
			Handler:    _GateKeeper_BlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gatekeeper.proto",
}
